import querySchedule from '@/models/querySchedule';
import fakeAxios from '@/utils/fakeAxios';

jest.mock('@/utils/fakeAxios');

describe('querySchedule', () => {
  it('should parse raw schedule data to schedule data', async () => {
    const rawSchedule = { available: [{ start: '2020-04-28T14:00:00Z', end: '2020-04-28T16:00:00Z' }, { start: '2020-04-28T23:00:00Z', end: '2020-04-28T23:30:00Z' }, { start: '2020-04-29T00:30:00Z', end: '2020-04-29T01:30:00Z' }, { start: '2020-04-29T02:30:00Z', end: '2020-04-29T03:00:00Z' }, { start: '2020-04-29T16:00:00Z', end: '2020-04-29T17:00:00Z' }, { start: '2020-04-30T00:00:00Z', end: '2020-04-30T02:00:00Z' }, { start: '2020-04-30T13:00:00Z', end: '2020-04-30T14:00:00Z' }, { start: '2020-04-30T17:00:00Z', end: '2020-04-30T18:00:00Z' }, { start: '2020-04-30T23:00:00Z', end: '2020-05-01T00:00:00Z' }, { start: '2020-05-01T02:00:00Z', end: '2020-05-01T04:00:00Z' }, { start: '2020-05-01T15:00:00Z', end: '2020-05-01T15:30:00Z' }, { start: '2020-05-01T16:30:00Z', end: '2020-05-01T17:00:00Z' }, { start: '2020-05-02T02:00:00Z', end: '2020-05-02T02:30:00Z' }, { start: '2020-05-02T16:00:00Z', end: '2020-05-02T17:00:00Z' }], booked: [{ start: '2020-04-28T13:00:00Z', end: '2020-04-28T14:00:00Z' }, { start: '2020-04-28T16:00:00Z', end: '2020-04-28T18:00:00Z' }, { start: '2020-04-28T23:30:00Z', end: '2020-04-29T00:30:00Z' }, { start: '2020-04-29T01:30:00Z', end: '2020-04-29T02:30:00Z' }, { start: '2020-04-29T03:00:00Z', end: '2020-04-29T04:00:00Z' }, { start: '2020-04-29T13:00:00Z', end: '2020-04-29T16:00:00Z' }, { start: '2020-04-29T17:00:00Z', end: '2020-04-29T18:00:00Z' }, { start: '2020-04-30T02:00:00Z', end: '2020-04-30T04:00:00Z' }, { start: '2020-04-30T14:00:00Z', end: '2020-04-30T17:00:00Z' }, { start: '2020-05-01T00:00:00Z', end: '2020-05-01T02:00:00Z' }, { start: '2020-05-01T13:00:00Z', end: '2020-05-01T15:00:00Z' }, { start: '2020-05-01T15:30:00Z', end: '2020-05-01T16:30:00Z' }, { start: '2020-05-01T23:00:00Z', end: '2020-05-02T02:00:00Z' }, { start: '2020-05-02T02:30:00Z', end: '2020-05-02T04:00:00Z' }, { start: '2020-05-02T13:00:00Z', end: '2020-05-02T16:00:00Z' }] };
    fakeAxios.mockReturnValue(Promise.resolve(rawSchedule));

    /**
     * The result will be different in different time zones,
     * so the time zone of the expected data we prepared is the same as
     * the time zone in jest.config.js.
     */
    const expected = {
      1: [{ status: 'booked', time: new Date('2020-04-30T16:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T16:30:00.000Z') }, { status: 'available', time: new Date('2020-04-30T17:00:00.000Z') }, { status: 'available', time: new Date('2020-04-30T17:30:00.000Z') }, { status: 'available', time: new Date('2020-04-30T23:00:00.000Z') }, { status: 'available', time: new Date('2020-04-30T23:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T00:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T00:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T01:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T01:30:00.000Z') }, { status: 'available', time: new Date('2020-05-01T02:00:00.000Z') }, { status: 'available', time: new Date('2020-05-01T02:30:00.000Z') }, { status: 'available', time: new Date('2020-05-01T03:00:00.000Z') }, { status: 'available', time: new Date('2020-05-01T03:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T13:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T13:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T14:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T14:30:00.000Z') }, { status: 'available', time: new Date('2020-05-01T15:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T15:30:00.000Z') }], 2: [{ status: 'booked', time: new Date('2020-05-01T16:00:00.000Z') }, { status: 'available', time: new Date('2020-05-01T16:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T23:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-01T23:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T00:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T00:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T01:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T01:30:00.000Z') }, { status: 'available', time: new Date('2020-05-02T02:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T02:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T03:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T03:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T13:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T13:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T14:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T14:30:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T15:00:00.000Z') }, { status: 'booked', time: new Date('2020-05-02T15:30:00.000Z') }], 3: [{ status: 'available', time: new Date('2020-05-02T16:00:00.000Z') }, { status: 'available', time: new Date('2020-05-02T16:30:00.000Z') }], 28: [{ status: 'booked', time: new Date('2020-04-28T13:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-28T13:30:00.000Z') }, { status: 'available', time: new Date('2020-04-28T14:00:00.000Z') }, { status: 'available', time: new Date('2020-04-28T14:30:00.000Z') }, { status: 'available', time: new Date('2020-04-28T15:00:00.000Z') }, { status: 'available', time: new Date('2020-04-28T15:30:00.000Z') }], 29: [{ status: 'booked', time: new Date('2020-04-28T16:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-28T16:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-28T17:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-28T17:30:00.000Z') }, { status: 'available', time: new Date('2020-04-28T23:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-28T23:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T00:00:00.000Z') }, { status: 'available', time: new Date('2020-04-29T00:30:00.000Z') }, { status: 'available', time: new Date('2020-04-29T01:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T01:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T02:00:00.000Z') }, { status: 'available', time: new Date('2020-04-29T02:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T03:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T03:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T13:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T13:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T14:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T14:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T15:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T15:30:00.000Z') }], 30: [{ status: 'available', time: new Date('2020-04-29T16:00:00.000Z') }, { status: 'available', time: new Date('2020-04-29T16:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T17:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-29T17:30:00.000Z') }, { status: 'available', time: new Date('2020-04-30T00:00:00.000Z') }, { status: 'available', time: new Date('2020-04-30T00:30:00.000Z') }, { status: 'available', time: new Date('2020-04-30T01:00:00.000Z') }, { status: 'available', time: new Date('2020-04-30T01:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T02:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T02:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T03:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T03:30:00.000Z') }, { status: 'available', time: new Date('2020-04-30T13:00:00.000Z') }, { status: 'available', time: new Date('2020-04-30T13:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T14:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T14:30:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T15:00:00.000Z') }, { status: 'booked', time: new Date('2020-04-30T15:30:00.000Z') }],
    };

    const schedule = await querySchedule('2020-04-25T16:00:00.000Z');

    expect(schedule).toStrictEqual(expected);
  });
});
